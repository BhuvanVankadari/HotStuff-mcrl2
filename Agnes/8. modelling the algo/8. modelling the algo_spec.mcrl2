% First version of the actual algorithm

sort Message_type = struct newView | prepare | preCommit | commit | decide;

% Each tree node contains a proposed command (or a batch of them), metadata associated with the protocol,
% and a parent link
% Metadata not used 
% parentLink contains the id of the parent
% parent link = 0 for first message / node = root
sort Node = struct node(nodeID: Pos, command: Nat, parentLink: Nat) ?isNode | nullNode ?isNullNode;

% A Quorum Certicate (QC) over a tuple type, viewNumber , node is a data type that combines a collection
% of signatures for the same tuple signed by (n âˆ’ f) replicas

% for now, the signature will just count how many replicas signed it
% null for first newview message
sort QC = struct quorum(type: Message_type, viewNum: Nat, node: Node, signature: Nat) ?isQuorum | 
				 nullQC ?isNullQC;

% justify is an additional optional field.
% leader always uses it to carry the QC for different phases
% replicas use it in newView messages to carry the highest prepareQC

sort Message = struct message(type: Message_type, viewNum: Nat, node: Node, mjustify: QC) ?isMessage |
			          nullMessage ?isNullMessage;

% initial state -> replicas send a special new view message
sort Phase = struct  INITIAL | PREPARE | PRECOMMIT | COMMIT | DECIDE;


% n = 3f + 1
map n: Nat; % number of replicas
map f: Nat; % number of faulty replicas
map num_views: Pos; % number of views
map id_leader: Pos; % leader id
 
eqn n = 2;
eqn f = 0;
eqn num_views = 2;
eqn id_leader = 1;

% calculate maximum element in a list
map maxList: List(Nat) -> Nat;

var a: Nat;
	list: List(Nat);

eqn maxList([]) = 0; % empty list
	maxList([a]) = a; % one element
	maxList(a |> list) = max(a, maxList(list)); % more than one element


act send_message, receive_message,receive_message_replica, send_message_leader, send_broadcast,
    receive_broadcast,message_sent, message_received, broadcast_sent, broadcast_received,
	receive_message_leader, send_message_replica: Message # Pos # Pos; % message, sender, receiver


% replica should send only 1 message
proc Replica(id: Pos, currentView: Pos, phase: Phase) = 
	% special new view message from replica
	% view 0 initial message
	(phase == INITIAL ) -> (send_message(message(newView, 0, node(1,23,0), nullQC) ,id,id_leader).
	                        Replica(id,currentView, PREPARE) ) +  

	% Prepare phase -> replica waits for prepare message from leader and votes TO DO
	(phase == PREPARE)  -> (sum k: Message.(isMessage(k)) -> (receive_broadcast(k,id_leader,id).
							Replica(id,currentView, phase)));

% numOfMessagesPerView = {view: num} - num of received messages for each view
proc Leader(id : Pos, currentView: Nat, phase: Phase, numOfMessagesPerView : Bag(Nat),
			broadcastedToReplica: List(Pos), proposedNode: Node) = 
	  
	 % Prepare phase 
	 % wait for n-f messages
	 % check if the message is for the appropriate phase in which the leader is in
	 % for now we keep the last node, this has to be improved later TO DO
	 (phase == INITIAL && count(Int2Nat(currentView - 1), numOfMessagesPerView ) < n - f) ->
	  (sum i: Message.(isMessage(i)) -> sum sender: Pos. (receive_message(i,sender,id)).(type(i) == newView) ->
		 Leader(id,currentView, phase, numOfMessagesPerView + Set2Bag({viewNum(i)}) , [], node(i))) + 
	  
	 % in the initial state we assume that there are no trees, i.e. the current node will be the root
	 % this means that we do not select any branch with highest view num, we just create a proposal
	 % for the node receinved in the messages
	 % when we have n - f messages we create a proposal if there is none
	 (phase == INITIAL && count(Int2Nat(currentView - 1), numOfMessagesPerView ) >= n - f && #broadcastedToReplica < n)
	   -> (sum replica: Pos. (replica in broadcastedToReplica == false) ->
	      (send_broadcast(message(prepare,currentView, proposedNode, quorum(prepare,currentView,
		   proposedNode, 0)), id, replica).Leader(id,currentView, phase, numOfMessagesPerView,
		                                          broadcastedToReplica <| replica, proposedNode)));
     % already sent n messages
 	 % (phase == initial && count(currentView - 1, numOfMessagesPerView ) >= n - f &&
	 % #broadcastedToReplica == n) -> 

% sum k of message might be a problem, consider adding it to a pool of messages
proc Channel =
	(sum k: Message. (isMessage(k)) -> sum i: Pos.
	(i <= n) -> ((receive_message_replica(k,i,id_leader).send_message_leader(k,i,id_leader).
				Channel) + (receive_message_leader(k,id_leader,i).
				send_message_replica(k,id_leader,i).Channel)));

init allow({message_sent, message_received, broadcast_sent, broadcast_received},
	 comm({ send_message | receive_message_replica -> message_sent,
		    send_message_leader | receive_message -> message_received,
			send_broadcast | receive_message_leader -> broadcast_sent,
			send_message_replica | receive_broadcast -> broadcast_received},
			Replica(1,1,INITIAL) || Replica(2,1,INITIAL) || Leader(1,1, INITIAL,{0:0},[],nullNode) || Channel
	 ));


	