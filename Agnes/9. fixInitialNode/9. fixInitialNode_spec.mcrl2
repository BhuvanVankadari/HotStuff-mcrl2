%  Correcting the initial message - All replicas should already have a certified root
% Assume the locked root is (1,0,0)
% Created function to get highest QC and function to get proposed node and incorporated them into the algo

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%SortDeclaration%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sort Message_type = struct newView | prepare | preCommit | commit | decide;

% Each tree node contains a proposed command (or a batch of them), metadata associated with the protocol,
% and a parent link
% Metadata not used 
% parentLink contains the id of the parent
% parent link = 0 for first message / node = root
sort Node = struct node(nodeID: Nat, command: Nat, parentLink: Nat) ?isNode | nullNode ?isNullNode;

% A Quorum Certicate (QC) over a tuple type, viewNumber , node is a data type that combines a collection
% of signatures for the same tuple signed by (n âˆ’ f) replicas

% for now, the signature will just count how many replicas signed it
% null for first newview message
sort QC = struct quorum(type: Message_type, viewNum: Nat, node: Node, signature: Nat) ?isQuorum | 
				 nullQC ?isNullQC;

% justify is an additional optional field.
% leader always uses it to carry the QC for different phases
% replicas use it in newView messages to carry the highest prepareQC
sort Message = struct message(type: Message_type, viewNum: Nat, node: Node, mjustify: QC) ?isMessage |
			          nullMessage ?isNullMessage;

% initial phase  -> replicas send a special new view message
sort Phase = struct  INITIAL | PREPARE | PRECOMMIT | COMMIT | DECIDE;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%MapDeclaration%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% n = 3f + 1
map n: Nat; % number of replicas
map f: Nat; % number of faulty replicas
map num_views: Pos; % number of views
map id_leader: Pos; % leader id
 
eqn n = 2;
eqn f = 0;
eqn num_views = 2;
eqn id_leader = 1;

% Function
% calculate maximum element in a list
map maxList: List(Nat) -> Nat;

var a: Nat;
	list: List(Nat);

eqn maxList([]) = 0; % empty list
	maxList([a]) = a; % one element
	maxList(a |> list) = max(a, maxList(list)); % more than one element

% Function
% check if node extends locked node
map extends: Node # Node -> Bool; % queried node, locked node
var a,b,c, d, e, g: Nat;
eqn extends(node(a,b,c), node(d,e,g)) = (c == d);

%Function
% check if the current view is >= the view of locked QC
% map isLatestView : Nat # Nat -> Bool; %, lockedView, current_view
% var viewLoked, curView: Nat;
% eqn isLatestView(viewLoked, curView) = (viewLocked >= curView);

% Function
% find the highest QC
map highestQC: QC # QC -> QC; % current QC, new QC
var qc1: QC;
	qc2: QC;
eqn max(viewNum(qc1), viewNum(qc2)) == viewNum(qc1) -> highestQC(qc1, qc2) = qc1;
    max(viewNum(qc1), viewNum(qc2)) == viewNum(qc2) -> highestQC(qc1, qc2) = qc2;
	highestQC(nullQC, qc2) = qc2; %  highQC is null initially
    highestQC(qc1, nullQC) = qc1; % in case one replica sends a nullQC

%Function
% get proposed node
% proposedNode is null when highQC is null, this is solved in highetQC	QC
map getProposedNode: QC # QC # Node # Node -> Node; % received qc, highQC, received node, proposedNode
var qc1, qc2: QC;
	node1, node2: Node;
eqn highestQC(qc1, qc2) == qc1 -> getProposedNode(qc1, qc2, node1, node2) = node1;
	highestQC(qc1, qc2) == qc2 -> getProposedNode(qc1, qc2, node1, node2) = node2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ActDeclaration%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

act send_message, receive_message,receive_message_replica, send_message_leader, send_broadcast,
    receive_broadcast,message_sent, message_received, broadcast_sent, broadcast_received,
	receive_message_leader, send_message_replica: Message # Pos # Pos; % message, sender, receiver

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ProcDeclaration%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Replica%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% replica should send only 1 message
proc Replica(id: Pos, currentView: Pos, phase: Phase, lockedQC: QC ) = 
	% special new view message from replica
	% view 0 initial message
	% correct node should extend the root i.e. parent link = 0
	% to have a small state space we assume, for now, that the first message is always the same

	(phase == INITIAL ) -> (send_message(message(newView, 0, node(2,23,1), lockedQC) ,id,id_leader).
	                        Replica(id,currentView, PREPARE, lockedQC) ) +  

	% Prepare phase -> replica waits for prepare message from leader and votes TO DO
	(phase == PREPARE)  -> (sum k: Message.(isMessage(k)) -> (receive_broadcast(k,id_leader,id).
							Replica(id,currentView, phase, lockedQC)));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Leader%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% numOfMessagesPerView = {view: num} - num of received messages for each view
proc Leader(id : Pos, currentView: Nat, phase: Phase, numOfMessagesPerView : Bag(Nat),
			broadcastedToReplica: List(Pos), proposedNode: Node, highQC: QC) = 
	  
	 % Prepare phase 
	 % wait for n-f messages
	 % check if the message is for the appropriate phase in which the leader is in
	 % for now we keep the last node, this has to be improved later TO DO
	 %highQC holds the QC with the highest view number from all lokedQC of replicas

	 (phase == PREPARE && count(Int2Nat(currentView - 1), numOfMessagesPerView ) < n - f) ->
	  (sum i: Message.(isMessage(i)) -> sum sender: Pos. (receive_message(i,sender,id)).(type(i) == newView) ->
		 Leader(id,currentView, phase, numOfMessagesPerView + Set2Bag({viewNum(i)}) , [], 
		 		getProposedNode(mjustify(i), highQC, node(i), proposedNode),
		 		highestQC(highQC, mjustify(i)))) + 
	  
	 % in the initial state we assume that there are no trees, i.e. the current node will be the root
	 % this means that we do not select any branch with highest view num, we just create a proposal
	 % for the node receinved in the messages
	 % when we have n - f messages we create a proposal if there is none

	 (phase == PREPARE && count(Int2Nat(currentView - 1), numOfMessagesPerView ) >= n - f && #broadcastedToReplica < n)
	   -> (sum replica: Pos. (replica in broadcastedToReplica == false) ->
	      (send_broadcast(message(prepare,currentView, proposedNode, highQC), id, replica).
		   Leader(id,currentView, phase, numOfMessagesPerView,
		                                          broadcastedToReplica <| replica, proposedNode, highQC)));
     % already sent n messages
 	 % (phase == initial && count(currentView - 1, numOfMessagesPerView ) >= n - f &&
	 % #broadcastedToReplica == n) -> 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Channel%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% sum k of message might be a problem, consider adding it to a pool of messages
proc Channel =
	(sum k: Message. (isMessage(k)) -> sum i: Pos.
	(i <= n) -> ((receive_message_replica(k,i,id_leader).send_message_leader(k,i,id_leader).
				Channel) + (receive_message_leader(k,id_leader,i).
				send_message_replica(k,id_leader,i).Channel)));


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Initialization%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

init allow({message_sent, message_received, broadcast_sent, broadcast_received},
	 comm({ send_message | receive_message_replica -> message_sent,
		    send_message_leader | receive_message -> message_received,
			send_broadcast | receive_message_leader -> broadcast_sent,
			send_message_replica | receive_broadcast -> broadcast_received},
			Replica(1,1,INITIAL, quorum(newView, 0,node(1,0,0),0 )) || Replica(2,1,INITIAL, quorum(newView, 0,node(1,0,0),0 )) ||
		    Leader(1,1, PREPARE,{0:0},[],nullNode, nullQC ) ||
			 Channel
	 ));

%not sure about message type for locked QC TO BE DISCUSSED
	