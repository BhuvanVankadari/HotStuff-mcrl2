% Sending a broadcast

% sort Message_type = struct newView | prepare | preCommit | commit | decide;

% sort Message = struct message(type: Message_type, viewNum: Pos);

%n = 3f + 1
map n: Nat; % number of replicas
map f: Nat; %number of faulty replicas
map num_views: Pos; % number of views
 
eqn n = 3;
eqn f = 0;
eqn num_views = 2;

% calculate maximum element in a list
map maxList: List(Nat) -> Nat;

var a: Nat;
	list: List(Nat);

eqn maxList([]) = 0; % empty list
	maxList([a]) = a; % one element
	maxList(a |> list) = max(a, maxList(list)); % more than one element

act send_message, receive_message, send_broadcast, receive_broadcast,message_exchange, broadcast: Nat # Nat # Nat; % message, sender, receiver

%state = 0 -> replica sends message, state = 1 replica waits for message 
proc Replica(id: Nat, currentView: Nat, state: Bool) = 
	%replica sends message
	(state == false ) -> (sum i: Nat.(  
     send_message(currentView,id,i).Replica(id,currentView,true) )) + 
	%replica receives message
	(state == true)  -> (sum j,k: Nat.(receive_broadcast(k,j,id).Replica(id,currentView,false)));


proc Leader(id : Nat, highestView : List(Nat), count_msj : Nat, broadcasts: Nat) = 
	 (count_msj < n - f) -> (sum i,j: Nat. (receive_message(i,j,id).Leader(id, highestView <| i, count_msj + 1, 0))) + 
	 (count_msj >= n - f && broadcasts < n)  -> (sum i: Nat. (send_broadcast(maxList(highestView), id, i).Leader(id,highestView, count_msj, broadcasts + 1)));

init allow({message_exchange, broadcast},
	 comm({ send_message|receive_message -> message_exchange,
			send_broadcast | receive_broadcast -> broadcast},
			Replica(1,1,false) || Replica(2,1,false)|| Replica(3,1,false) || Leader(3,[],0,0) 
	 ));










	