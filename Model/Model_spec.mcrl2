sort
    % Types of messages that can be generated within the protocol
    MessageType = struct newView
                       | prepare
                       | preCommit
                       | commit
                       | decide;
    
    % Data structure for the quorum certificate
    %
    % A Quorum Certicate (QC) is a signed message and has a specific message type, corresponding view number, the node 
    % and the signature on the replicas that signed it the signature is the number of replicas that signed it
    QC = struct createQC(type: MessageType, viewNumber: Nat, node: Node, signature: Nat)
                             | NullQC;

    % Data structure for the tree of commands
    %
    % Each tree node contains a proposed command, a parent link and an ID for the node
    % parentLink contains the id of the parent
    % parent link = 0 for the root
    Node = struct createNode(nodeID: Nat, command: Nat, parentLink: Nat) | NullNode;

    % Data structure for the message
    %
    % A message has a type, a view number, a node and an additional fiels, mjustufy
    % The leader always uses mjustify to carry the QC for different phases
    % Replicas use mjustify in newView messages to carry the highest prepareQC
    Message = struct createMessage(type: MessageType, viewNumber: Nat, node: Node, mJustify: QC,
                                   partialSignature: Signature) ?isMessage
                   | NullMessage ?isNullMessage;
    
    % Data structure for the signature
    %
    % The signature is used for signing the messages and uniquely identifying the replica
    % A faulty replica controlled by an adversary cannot replicate the signature of another replica. In this case, it 
    % cannot use another replica's ID to sign the message (guaranteed by the protocol's description of the cryptographic
    % primitives it relies on).
    Signature = struct createSignature(replicaID: Pos)
                     | NullSignature;
                     
% Constant declarations
map
    % Number of replicas
    N: Nat; 
    
    % Number of faulty replicas
    F: Nat;

    % Maximum number of views
    %
    % Restriction on the maximum number of views to avoid infinite state spaces
    NUM_VIEWS: Pos;
    
    % Maximum command number
    %
    % Client sends a command between 0 and MAX_COMMAND to avoid infinite state spaces
    MAX_COMMAND: Nat;

    % List of valid message types
    %
    % List that a faulty replica uses to randomly sample from to decide on the message type
    MESSAGE_LIST: List(Message_type);
    
% Constant assignments
eqn
    N = 3;
    F = 1;
    NUM_VIEWS = 3;
    MAX_COMMAND = 3;
    MESSAGE_LIST = [newView, prepare, preCommit, commit, decide];

% Function declarations
map
    extends: Node # Node -> Bool;
    highestQC: QC # QC -> QC;
    safeNode: Node # QC # QC -> Bool;
    matchingMessage: Message # MessageType # Nat -> Bool;
    matchingQC: QC # MessageType # Nat -> Bool;

% Parameters for the functions
var
    % Parameters associated with the extends() function
    expectedParent: Node;
    nodeToCheck: Node;

    % Parameters associated with the highestQC() function
    qc1: QC;
    qc2: QC;

    % Parameters associated with the safeNode() function
    nodeToCheck: Node;
    qcLocked: QC;
    qcHigh: QC;

    % Parameters associated with the matchingMessage() function
    messageToCheck: Message;
    expectedMsgType: MessageType;
    expectedViewNum: Nat;

    % Parameters associated with matchingQC() function
    QCToCheck: QC;
    expectedMsgType: MessageType;
    expectedViewNum: Nat;

% Function definitions 
eqn
    %%%
    % Function to check if a node extends required node
    %
    % @param expectedParent      the expected parent node
    % @param nodeToCheck         the node whose parent is being checked
    %
    % @return boolean value representing whether nodeToCheck extends expectedParent
    %
    %%%
    extends(expectedParent, nodeToCheck) = parentLink(nodeToCheck) == nodeID(expectedParent);
    (expectedParent == nullNode || nodeToCheck == nullNode) -> extends(expectedParent, nodeToCheck) = false;

    %%%
    % Function to retrieve the quorum certificate associated with the highest view number between two quorum 
    % certificates
    %
    % @param qc1                 the first quorum certificate being compared
    % @param qc2                 the second quorum certificate being compared
    %
    % @return the quorum certificate associated with the highest view number
    %
    %%%
    % when one QC is null, the other(non-null) QC is selected, when both are null the highest QC is null (nullQC)
    highestQC(NullQC, qc2) = qc2;
    highestQC(qc1, NullQC) = qc1;
    highestQC(NullQC, NullQC) = NullQC;
    max(viewNumber(qc1), viewNumber(qc2)) == viewNumber(qc1) -> highestQC(qc1, qc2) = qc1;
    max(viewNumber(qc1), viewNumber(qc2)) == viewNumber(qc2) -> highestQC(qc1, qc2) = qc2;

    %%%
    % Function to check if the proposed node is safe i.e. the node either extends lockedQC (safety rule) or
    % highQC.viewNumber > lockedQC.viewNumber (liveness rule)
    %
    % @param nodeToCheck         the node whose safety is being checked
    % @param qcLocked            the locked quorum certificate
    % @param qcHigh              the quorum certificate with the highest view number
    %
    % @return boolean value representing whether the node is safe (as defined in function spec) or not
    %
    %%%
    (nodeToCheck == nullNode || qcLocked == nullQC || qcHigh == nullQC) ->
        safeNode(nodeToCheck, qcLocked, qcHigh) = false;
    safeNode(nodeToCheck, qcLocked, qcHigh) =
        extends(nodeToCheck, node(qcLocked)) || (viewNumber(qcHigh) > viewNumber(qcLocked));
    
    %%%
    % Function to check if the message matches the required type and view number
    %                                                                                                                  
    % @param messageToCheck      the message that needs to be checked
    % @param expectedMsgType     the expected type of the message
    % @param expectedViewNum     the expected view number of the message
    %
    % @return boolean value representing whether the message matches the details
    %
    %%%
    (messageToCheck == NullMessage) -> matchingMessage(messageToCheck, expectedMsgType, expectedViewNum) = false;
    matchingMessage(messageToCheck, expectedMsgType, expectedViewNum) =
        (expectedMsgType == type(messageToCheck)) && (expectedViewNum == viewNumber(messageToCheck));

    %%%
    % Function to check if the QC matches the required type and view
    %                                                                                                                  
    % @param QCToCheck           the QC that needs to be checked
    % @param expectedMsgType     the expected message type of the QC
    % @param expectedViewNum     the expected view number of the QC
    %
    % @return boolean value representing whether the QC matches the details
    %
    %%%
    (QCToCheck == NullQC) -> matchingQC(QCToCheck, expectedMsgType, expectedViewNum) = false;
    matchingQC(QCToCheck, expectedMsgType, expectedViewNum) =
        (expectedMsgType == type(QCToCheck)) &&
        (expectedViewNum == viewNumber(QCToCheck));
